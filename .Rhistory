from sqlalchemy import create_engine
q()
quit()
df_player_log <- dh_getQuery(db_con, "player_log.sql") |>
mutate(slug_season = ordered(slug_season)) |>
mutate(season_type = ordered(season_type, c("Pre Season", "Regular Season", "Playoffs"))) |>
mutate(year_season_type = forcats::fct_cross(season_type, str_sub(slug_season, start = 6), sep=" "))
library(rlang)
library(dplyr)
library(tidyr)
library(tidyselect)
library(purrr)
library(ggplot2)
library(plotly)
library(stringr)
library(gt)
library(here)
source(here("_proj_const.R"))
source(here("_proj_init.R"))
df_player_log <- dh_getQuery(db_con, "player_log.sql") |>
mutate(slug_season = ordered(slug_season)) |>
mutate(season_type = ordered(season_type, c("Pre Season", "Regular Season", "Playoffs"))) |>
mutate(year_season_type = forcats::fct_cross(season_type, str_sub(slug_season, start = 6), sep=" "))
# Variables
current_date <- as.Date("2023-01-05") # Change to Sys.Date()
db_con <- postgre_con
df_player_log <- dh_getQuery(db_con, "player_log.sql") |>
mutate(slug_season = ordered(slug_season)) |>
mutate(season_type = ordered(season_type, c("Pre Season", "Regular Season", "Playoffs"))) |>
mutate(year_season_type = forcats::fct_cross(season_type, str_sub(slug_season, start = 6), sep=" "))
View(df_player_log)
View(df_player_log)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
View(df_perf_tab)
runApp()
length(c())
runApp()
runApp()
runApp()
View(df_perf_tab)
runApp()
View(df_perf_tab)
x <- c("3-pointers", "Assists", "Blocks")
View(stat_selection)
filter(stat_selection, formatted_name %in% x)
filter(stat_selection, formatted_name %in% x)$database_name
View(df_perf_tab)
t <- filter(stat_selection, formatted_name %in% x)$database_name
t
library(stringr)
paste0(t, collapse = "|")
filter(df_perf_tab, stringr::str_detect(`Excels At`, regex("fg3_m|ast|blk")))
filter(df_perf_tab, stringr::str_detect(`Excels At`, regex("fg3_m|ast|blk"))) |> View()
runApp()
runApp()
filter(
df_perf_tab,
stringr::str_detect(
`Excels At`,
paste0(filter(stat_selection, formatted_name %in% x)$database_name, collapse = "|")
)
filter(
filter(stat_selection, formatted_name %in% x)$database_name, collapse = "|")
paste0(filter(stat_selection, formatted_name %in% x)$database_name, collapse = "|"))
paste0(filter(stat_selection, formatted_name %in% x)$database_name, collapse = "|")
filter(
df_perf_tab,
stringr::str_detect(
`Excels At`,
paste0(filter(stat_selection, formatted_name %in% x)$database_name, collapse = "|")
)
filter(
filter(
df_perf_tab,
stringr::str_detect(
`Excels At`,
paste0(filter(stat_selection, formatted_name %in% x)$database_name, collapse = "|")
))
filter(
df_perf_tab,
stringr::str_detect(
`Excels At`,
paste0(filter(stat_selection, formatted_name %in% x)$database_name, collapse = "|")
))$Player
sort(filter(
df_perf_tab,
stringr::str_detect(
`Excels At`,
paste0(filter(stat_selection, formatted_name %in% x)$database_name, collapse = "|")
))$Player)
runApp()
View(df_perf_tab)
runApp()
View(df_player_log)
runApp()
View(df_perf_tab)
runApp()
filter(
df_perf_tab,
stringr::str_detect(
`Excels At`,
paste0(filter(stat_selection, formatted_name %in% x)$database_name, collapse = "|")
))
runApp()
filter(df_perf_tab, stringr::str_detect(`Excels At`, paste0(filter(stat_selection, formatted_name %in% input$excels_at_filter)$database_name, collapse = "|")))
View(df_perf_tab)
filter(df_perf_tab, stringr::str_detect(`Excels At`, paste0(filter(stat_selection, formatted_name %in% input$excels_at_filter)$database_name, collapse = "|")))$Player
View(df_player_log)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
x <- c("tov", "pts")
x <- c("tov", "pts")
walk(x, ~ mutate(df_perf_tab, xl_at_count = if(str_detect(`Excels At`, .x), xl_at_count + 1)))
walk(x, ~ mutate(df_perf_tab, xl_at_count = if(str_detect(`Excels At`, .x), xl_at_count + 1, xl_at_count)))
walk(x, ~ mutate(df_perf_tab, xl_at_count = if_else(str_detect(`Excels At`, .x), xl_at_count + 1, xl_at_count)))
runApp()
View(df_perf_tab)
df_perf_tab <- mutate(df_perf_tab, xl_at_count = 0)
# Count how many events a player excels given the selection
# observeEvent(input$excels_at_filter, {
walk(x, ~ mutate(df_perf_tab, xl_at_count = if_else(str_detect(`Excels At`, .x), xl_at_count + 1, xl_at_count)))
# Count how many events a player excels given the selection
# observeEvent(input$excels_at_filter, {
map(x, ~ mutate(df_perf_tab, xl_at_count = if_else(str_detect(`Excels At`, .x), xl_at_count + 1, xl_at_count)))
# Count how many events a player excels given the selection
# observeEvent(input$excels_at_filter, {
map(x, ~ mutate(df_perf_tab, xl_at_count = if_else(str_detect(`Excels At`, .x), xl_at_count + 1, xl_at_count))) |> View()
# Count how many events a player excels given the selection
# observeEvent(input$excels_at_filter, {
for(.x %in% x) print(.x)
# Count how many events a player excels given the selection
# observeEvent(input$excels_at_filter, {
for(cat %in% x) print(cat)
# Count how many events a player excels given the selection
# observeEvent(input$excels_at_filter, {
for(cat in x) print(cat)
runApp()
runApp()
View(df_perf_tab)
runApp()
runApp()
runApp()
runApp()
df_perf_tab$xl_at_count
is.null(df_perf_tab$xl_at_count)
df_perf_tab$xl_at_count <- 0
View(df_perf_tab)
runApp()
runApp()
runApp()
View(df_perf_tab)
View(stat_selection)
runApp()
runApp()
runApp()
runApp()
runApp()
reticulate::repl_python()
reticulate::py_run_file(here("python", "fty_update.py"))
reticulate::py_run_file(here("python", "fty_update.py"))
reticulate::py_run_file(here("python", "fty_update.py"))
library(tidyr)
library(tidyr)
library(tidyr)
library(tidyr)
library(tidyr)
library(tidyr)
library(tidyselect)
library(purrr)
library(ggplot2)
library(plotly)
library(stringr)
library(gt)
library(here)
library(shinycssloaders)
source(here("_proj_const.R"))
source(here("_proj_init.R"))
reticulate::py_run_file(here("python", "fty_update.py"))
.load_datasets()
reticulate::py_run_file(here("python", "fty_update.py"))
reticulate::py_run_file(here("python", "fty_update.py"))
library(rlang)
library(dplyr)
library(tidyr)
library(tidyselect)
library(purrr)
library(ggplot2)
library(plotly)
library(stringr)
library(gt)
library(here)
library(shinycssloaders)
source(here("_proj_const.R"))
source(here("_proj_init.R"))
reticulate::py_run_file(here("python", "fty_update.py"))
reticulate::py_run_file(here("python", "fty_update.py"))
library(rlang)
library(dplyr)
library(tidyr)
library(tidyselect)
library(purrr)
library(ggplot2)
library(plotly)
library(stringr)
library(gt)
library(here)
library(shinycssloaders)
source(here("_proj_const.R"))
source(here("_proj_init.R"))
reticulate::py_run_file(here("python", "fty_update.py"))
x <- reticulate::py_run_file(here("python", "fty_update.py"))
x
x$job_log
x$r
x$dh
x$dataHub
library(rlang)
library(dplyr)
library(tidyr)
library(tidyselect)
library(purrr)
library(ggplot2)
library(plotly)
library(stringr)
library(gt)
library(here)
library(shinycssloaders)
source(here("_proj_const.R"))
source(here("_proj_init.R"))
job_log <- reticulate::py_run_file(here("python", "fty_update.py"))$job_log
View(job_log)
View(job_log)
job_log
flatten(job_log)
unlist(job_log)
"Failure" %in% unlist(job_log)
!"Success" %in% unlist(job_log)
!("Success" %in% unlist(job_log))
"Success" %in% unlist(job_log)
"Success" !%in% unlist(job_log)
"Failure" %in% unlist(job_log)
unlist(job_log) == "Success"
all(unlist(job_log) == "Success")
!all(unlist(job_log) == "Success")
all(unlist(job_log) == "Success")
unlist(job_log) == "Success"
unlist(job_log) != "Success"
job_log[unlist(job_log) != "Success"]
names(job_log[unlist(job_log) != "Success"])
paste(names(job_log[unlist(job_log) != "Success"]), collapse = ", ")
paste(names(job_log[unlist(job_log) != "Success"]), collapse = ", "), "failed to update."))
paste(names(job_log[unlist(job_log) != "Success"])
paste(names(job_log[unlist(job_log) != "Success"]))
paste("Job(s):", paste(names(job_log[unlist(job_log) != "Success"]), collapse = ", "), "failed to update.")
library(rlang)
library(dplyr)
library(tidyr)
library(tidyselect)
library(purrr)
library(ggplot2)
library(plotly)
library(stringr)
library(gt)
library(here)
library(shinycssloaders)
source(here("_proj_const.R"))
source(here("_proj_init.R"))
shiny::runApp()
View(df_perf_tab)
runApp()
View(df_perf_tab)
runApp()
runApp()
runApp()
View(df_perf_tab)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df_perf_tab$xl_at_count <- reactiveVal()
df_perf_tab$xl_at_count <- reactiveValues()
df_perf_tab$xl_at_count <- lst(reactiveValues())
df_perf_tab$xl_at_count$cnt = 0
df_perf_tab$xl_at_count = 0
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(df_player_log)
View(df_perf_tab)
runApp()
View(perf_tab)
runApp()
colorspace::diverge_hcl()
colorspace::diverge_hcl(1)
colours()
colours()[1]
colours()[2]
colours()[3]
colours()[-1]
colours()[-]
colours()[, -1]
colours()[ -1, ]
colours()[:-1]
colours()[-1]
colours()
colours()[657 - 1]
colorspace::diverging_hsv()
colorspace::diverging_hsv(4)
colorspace::hcl_palettes()
c("white", "lightblue", "dodgerblue")[1]
c("white", "lightblue", "dodgerblue")[2]
c("white", "lightblue", "dodgerblue")[3]
c("white", "lightblue", "dodgerblue")[3]
colours()
colours() |> View()
tibble(colours()) |> View()
runApp()
runApp()
runApp()
runApp()
runApp()
0:4
0:3
View(perf_tab)
lapply(0:3, \(x){
tab_style(
perf_tab,
style = cell_fill(color = c("white", "lightblue1", "dodgerblue", "blue")[x + 1]),
locations = cells_body(
columns = "Excels At",
rows = xl_at_count == x
)
)
})
runApp()
runApp()
runApp()
runApp()
1:3
runApp()
runApp()
runApp()
runApp()
runApp()
walk2(c("lightblue1", "dodgerblue", "blue"), 1:3, ~ {
tab_style(
perf_tab,
style = cell_fill(color = .x),
locations = cells_body(columns = "Excels At", rows = xl_at_count == .y)
)
})
map2(c("lightblue1", "dodgerblue", "blue"), 1:3, ~ {
tab_style(
perf_tab,
style = cell_fill(color = .x),
locations = cells_body(columns = "Excels At", rows = xl_at_count == .y)
)
})
map2(c("lightblue1", "dodgerblue", "blue"), 1:3, ~ {
tab_style(
perf_tab,
style = cell_fill(color = .x),
locations = cells_body(columns = "Excels At", rows = xl_at_count == .y)
)
}) |> class()
modify2(c("lightblue1", "dodgerblue", "blue"), 1:3, ~ {
tab_style(
perf_tab,
style = cell_fill(color = .x),
locations = cells_body(columns = "Excels At", rows = xl_at_count == .y)
)
}) |> class()
for(1:3) print
for(x in 1:3) print
for(x in 1:3) print(x)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
2:3
shiny::runApp()
runApp()
shiny::runApp()
